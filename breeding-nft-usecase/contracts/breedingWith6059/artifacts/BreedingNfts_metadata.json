{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ChildAlreadyExists",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ChildIndexOutOfRange",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721AddressZeroIsNotaValidOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721ApprovalToCurrentOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721ApproveCallerIsNotOwnerNorApprovedForAll",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721ApproveToCaller",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721InvalidTokenId",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721MintToTheZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721NotApprovedOrOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721TokenAlreadyMinted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721TransferFromIncorrectOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721TransferToNonReceiverImplementer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC721TransferToTheZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "IdZeroForbidden",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "IsNotContract",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MaxPendingChildrenReached",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "childContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "MaxRecursiveBurnsReached",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MintToNonNestableImplementer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NestableTooDeep",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NestableTransferToDescendant",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NestableTransferToNonNestableImplementer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NestableTransferToSelf",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotApprovedOrDirectOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PendingChildIndexOutOfRange",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UnexpectedChildId",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UnexpectedNumberOfChildren",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "AllChildrenRejected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "ChildAccepted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "ChildProposed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "fromPending",
						"type": "bool"
					}
				],
				"name": "ChildTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "toTokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "NestTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "acceptChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "addChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "intrestedToken",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "patnerToken",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "intrestedTokenContractAddress",
						"type": "address"
					}
				],
				"name": "breedNft",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxChildrenBurns",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "childIsInActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "childOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct INestable.Child",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					}
				],
				"name": "childrenOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct INestable.Child[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "directOwnerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					}
				],
				"name": "nestTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "nestTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "parentsOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "intrestedToken",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "partnerToken",
								"type": "uint256"
							}
						],
						"internalType": "struct BreedingNfts.Parents",
						"name": "_parent",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "parentsRecord",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "intrestedToken",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "partnerToken",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "pendingChildOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct INestable.Child",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					}
				],
				"name": "pendingChildrenOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct INestable.Child[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxRejections",
						"type": "uint256"
					}
				],
				"name": "rejectAllChildren",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isPending",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transferChild",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"acceptChild(uint256,uint256,address,uint256)": {
					"details": "This moves the child token from parent token's pending child tokens array into the active child tokens  array.",
					"params": {
						"childAddress": "Address of the collection smart contract of the child token expected to be located at the  specified index of the given parent token's pending children array",
						"childId": "ID of the child token expected to be located at the specified index of the given parent token's  pending children array",
						"childIndex": "Index of a child tokem in the given parent's pending children array",
						"parentId": "ID of the parent token for which the child token is being accepted"
					}
				},
				"addChild(uint256,uint256,bytes)": {
					"details": "This adds the iichild token into the given parent token's pending child tokens array.You MUST NOT call this method directly. To add a a child to an NFT you must use either  `nestTransfer`, `nestMint` or `transferChild` to the NFT.Requirements:  - `ownerOf` on the child contract must resolve to the called contract.  - The pending array of the parent contract must not be full.",
					"params": {
						"childId": "ID of the new proposed child token",
						"data": "Additional data with no specified format",
						"parentId": "ID of the parent token to receive the new child token"
					}
				},
				"approve(address,uint256)": {
					"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
				},
				"balanceOf(address)": {
					"details": "Returns the number of tokens in ``owner``'s account."
				},
				"burn(uint256)": {
					"params": {
						"tokenId": "ID of the token to burn"
					}
				},
				"burn(uint256,uint256)": {
					"details": "When a token is burned, its children are recursively burned as well.The approvals are cleared when the token is burned.Requirements:  - `tokenId` must exist.Emits a {Transfer} event.",
					"params": {
						"maxChildrenBurns": "Maximum children to recursively burn",
						"tokenId": "ID of the token to burn"
					},
					"returns": {
						"_0": "uint256 The number of recursive burns it took to burn all of the children"
					}
				},
				"childIsInActive(address,uint256)": {
					"params": {
						"childAddress": "Address of the given token's collection smart contract",
						"childId": "ID of the child token being checked"
					},
					"returns": {
						"_0": "bool A boolean value signifying whether the given child token is included in an active child tokens array  of a token (`true`) or not (`false`)"
					}
				},
				"childOf(uint256,uint256)": {
					"details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"index": "Index of the child token in the parent token's active child tokens array",
						"parentId": "ID of the parent token for which the child is being retrieved"
					},
					"returns": {
						"_0": "struct A Child struct containing data about the specified child"
					}
				},
				"childrenOf(uint256)": {
					"details": "Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"parentId": "ID of the parent token for which to retrieve the active child tokens"
					},
					"returns": {
						"_0": "struct[] An array of Child structs containing the parent token's active child tokens"
					}
				},
				"directOwnerOf(uint256)": {
					"details": "In the event the NFT is owned by an externally owned account, `tokenId` will be `0` and `isNft` will be  `false`.",
					"params": {
						"tokenId": "ID of the token for which the immediate owner is being retrieved"
					},
					"returns": {
						"_0": "address Address of the immediate owner. If the token is owned by an externally owned account, its address  will be returned. If the token is owned by another token, the parent token's collection smart contract address  is returned",
						"_1": "uint256 Token ID of the immediate owner. If the immediate owner is an externally owned account, the value  should be `0`",
						"_2": "bool A boolean value signifying whether the immediate owner is a token (`true`) or not (`false`)"
					}
				},
				"getApproved(uint256)": {
					"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
				},
				"isApprovedForAll(address,address)": {
					"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
				},
				"nestTransferFrom(address,address,uint256,uint256,bytes)": {
					"details": "The destination token MUST NOT be a child token of the token being transferred or one of its downstream  child tokens.",
					"params": {
						"destinationId": "ID of the token to receive the token being transferred",
						"from": "Address of the direct owner of the token to be transferred",
						"to": "Address of the receiving token's collection smart contract",
						"tokenId": "ID of the token being transferred"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "Root owner is always the externally owned account.If the given token is owned by another token, it will recursively query the parent tokens until reaching the  root owner.",
					"params": {
						"tokenId": "ID of the token for which the root owner is being retrieved"
					},
					"returns": {
						"_0": "address Address of the root owner of the given token"
					}
				},
				"pendingChildOf(uint256,uint256)": {
					"details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"index": "Index of the child token in the parent token's pending child tokens array",
						"parentId": "ID of the parent token for which the pending child token is being retrieved"
					},
					"returns": {
						"_0": "struct A Child struct containting data about the specified child"
					}
				},
				"pendingChildrenOf(uint256)": {
					"details": "Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"parentId": "ID of the parent token for which to retrieve the pending child tokens"
					},
					"returns": {
						"_0": "struct[] An array of Child structs containing the parent token's pending child tokens"
					}
				},
				"rejectAllChildren(uint256,uint256)": {
					"details": "Removes the children from the pending array mapping.This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the  rootOwner of the previous parent.",
					"params": {
						"tokenId": "ID of the parent token for which to reject all of the pending tokens"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
				},
				"setApprovalForAll(address,bool)": {
					"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
					"params": {
						"childAddress": "Address of the child token's collection smart contract.",
						"childId": "ID of the child token in its own collection smart contract.",
						"childIndex": "Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)",
						"data": "Additional data with no specified format, sent in call to `_to`",
						"destinationId": "ID of the token to receive this child token (MUST be 0 if the destination is not a token)",
						"isPending": "A boolean value indicating whether the child token being transferred is in the pending array of the  parent token (`true`) or in the active array (`false`)",
						"to": "Address to which to transfer the token to",
						"tokenId": "ID of the parent token from which the child token is being transferred"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptChild(uint256,uint256,address,uint256)": {
					"notice": "@notice Used to accept a pending child token for a given parent token."
				},
				"addChild(uint256,uint256,bytes)": {
					"notice": "Used to add a child token to a given parent token."
				},
				"burn(uint256)": {
					"notice": "Used to burn a given token."
				},
				"burn(uint256,uint256)": {
					"notice": "Used to burn a token."
				},
				"childIsInActive(address,uint256)": {
					"notice": "Used to verify that the given child tokwn is included in an active array of a token."
				},
				"childOf(uint256,uint256)": {
					"notice": "Used to retrieve a specific active child token for a given parent token."
				},
				"childrenOf(uint256)": {
					"notice": "Used to retrieve the active child tokens of a given parent token."
				},
				"directOwnerOf(uint256)": {
					"notice": "Used to retrieve the immediate owner of the given token."
				},
				"nestTransferFrom(address,address,uint256,uint256,bytes)": {
					"notice": "Used to transfer the token into another token."
				},
				"ownerOf(uint256)": {
					"notice": "Used to retrieve the root owner of the given token."
				},
				"pendingChildOf(uint256,uint256)": {
					"notice": "Used to retrieve a specific pending child token from a given parent token."
				},
				"pendingChildrenOf(uint256)": {
					"notice": "Used to retrieve the pending child tokens of a given parent token."
				},
				"rejectAllChildren(uint256,uint256)": {
					"notice": "Used to reject all pending children of a given parent token."
				},
				"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
					"notice": "Used to transfer a child token from a given parent token."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"breeding-nft-usecase/contracts/breedingWith6059/BreedingNft.sol": "BreedingNfts"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
				"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49",
			"license": "MIT",
			"urls": [
				"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22",
				"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
				"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"breeding-nft-usecase/contracts/breedingWith6059/BreedingNft.sol": {
			"keccak256": "0x32e45ceae7e0a3af42f0dab91242166471db802129a6f24f46e4192bb14633ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://a87b2dee263f346d7800831733e0121df5fff62d3107365dd472ef8fd25379e0",
				"dweb:/ipfs/QmNbLqSHYjjDDfR2TDe3TgFxuyebyBc87URr8mijvLaTZC"
			]
		},
		"erc6059-research/INestable.sol": {
			"keccak256": "0xc74ba2bbea0f5003e91f6c65f58a141b57d62e7f810303444e4ac55840497e9c",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://1b7478935f4483792a5a12cb0ba441f26be8207ae7e4a6c9d966730009ac09fb",
				"dweb:/ipfs/QmXUGGzdtwuv2SLghJhSYZyx2qeDwWfoZSjKWEUkMid3uD"
			]
		},
		"erc6059-research/NestableToken.sol": {
			"keccak256": "0x8bee0e24b36a643a672374e4a4c1204e5f2bfec395111f8d365b3d16f3af2e26",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://972e50c3d37faf63f1951b125398649dfadbaf727ff414890a96033b2a6368d4",
				"dweb:/ipfs/QmWF8RnAqV14MYpVSy6KiU2vcXprPRFVouBjJmiqQCHDmx"
			]
		}
	},
	"version": 1
}